using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientApp
{
    public class PatientViewModel : IPatient
    {
        public event EventHandler<Patient> OnPatientRegistered;
        public event EventHandler<string> PatientRegistered;

        public ObservableCollection<Patient> Patients { get; private set; }
        public ObservableCollection<Patient> ConfirmedPatients { get; private set; }


        public PatientViewModel()
        {
            Patients = new ObservableCollection<Patient>();
            ConfirmedPatients = new ObservableCollection<Patient>();
        }

        public void RegisterPatient(Patient patient)
        {
            Patients.Add(patient);
            
            // Raise an event for notification
            OnPatientRegistered?.Invoke(this, patient);
            PatientRegistered?.Invoke(this, "Registration Completed");
        }

        public void ConfirmPatients(List<Patient> selectedPatients)
        {
            //ConfirmedPatients.Clear();
            foreach (var patient in selectedPatients)
            {
                ConfirmedPatients.Add(patient);
            }
        }
    }
}


<UserControl x:Class="PatientApp.PatientRegControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PatientApp"
             mc:Ignorable="d" 
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             d:DesignHeight="450" d:DesignWidth="800">
    <Grid>
        <StackPanel Margin="20">
            <TextBlock Text="Patient Registration" FontSize="20" FontWeight="Bold" />
            
            <TextBlock Text="Name"  />
            <TextBox x:Name="NameTextBox"  />

            <TextBlock Text="Age"/>
            <TextBox x:Name="AgeTextBox"/>
            
            <TextBlock Text="Date of Birth:" />
            <DatePicker x:Name="DOBPicker"  SelectedDateFormat="Short"  DisplayDateEnd="{x:Static sys:DateTime.Now}"/>

            <TextBlock Text="Address:" />
            <TextBox x:Name="AddressTextBox" />
            <TextBlock Text="Slot:" />
            <ComboBox x:Name="SlotComboBox" >
                <ComboBoxItem Content="Morning"  />
                <ComboBoxItem Content="Evening" />
            </ComboBox>

            <TextBlock Text="Booking Date:" />

            <DatePicker x:Name="BookingDatePicker" SelectedDateFormat="Short" DisplayDateStart="{x:Static sys:DateTime.Now}"/>
            
            <Button x:Name="btnRegister" Content="Register" Width="100" Height="30" Margin="0,10,0,0" Click="btnRegister_Click" />
        </StackPanel>
    </Grid>
    



    using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PatientApp
{
    /// <summary>
    /// Interaction logic for PatientRegControl.xaml
    /// </summary>
    public partial class PatientRegControl : UserControl
    {
        private PatientViewModel _viewModel;
        public event EventHandler NavigateToAppointment;
        public event EventHandler RegistrationCompleted;

        public PatientRegControl(PatientViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel;
        }

        private void btnRegister_Click(object sender, RoutedEventArgs e)
        {
            // Input validation
            string name = NameTextBox.Text.Trim();
            string address = AddressTextBox.Text.Trim();
            string slot = (SlotComboBox.SelectedItem as ComboBoxItem)?.Content.ToString();
            DateTime? dateOfBirth = DOBPicker.SelectedDate;
            DateTime? bookingDate = BookingDatePicker.SelectedDate;

            // Validate Name
            if (string.IsNullOrWhiteSpace(name))
            {
                MessageBox.Show("Please enter a valid name.", "Input Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // Validate Age
            if (!int.TryParse(AgeTextBox.Text, out int age) || age <= 0)
            {
                MessageBox.Show("Please enter a valid age (positive integer).", "Input Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // Validate Date of Birth
            if (!dateOfBirth.HasValue)
            {
                MessageBox.Show("Please select a valid date of birth.", "Input Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // Validate Slot
            if (string.IsNullOrWhiteSpace(slot))
            {
                MessageBox.Show("Please select a time slot.", "Input Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // Validate Address
            if (string.IsNullOrWhiteSpace(address))
            {
                MessageBox.Show("Please enter a valid address.", "Input Error", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            // Create Patient object
            var patient = new Patient
            {
                Name = name,
                Age = age,
                DateOfBirth = dateOfBirth.Value,
                Address = address,
                Slot = slot,
                BookingDate = bookingDate.Value,
            };

            try
            {
                // Register the patient
                _viewModel.RegisterPatient(patient);
                //MessageBox.Show("Patient details entered successfully.", "Registration Success", MessageBoxButton.OK, MessageBoxImage.Information);
                RegistrationCompleted?.Invoke(this,EventArgs.Empty);

                // Trigger navigation to appointment confirmation
                NavigateToAppointment?.Invoke(this,EventArgs.Empty);
            }
            catch (Exception ex)
            {
                // Handle any exceptions that occur during registration
                MessageBox.Show($"An error occurred while registering the patient: {ex.Message}", "Registration Error", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }
    }
}


<UserControl x:Class="PatientApp.PatientDashboardControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PatientApp"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel>
        <TextBlock Text="Patient Dashboard" FontSize="24" FontWeight="Bold"/>
        <TextBox x:Name="RegistrationStatusTextBox" IsReadOnly="True" Width="300" Height="30" Margin="0,10,0,10"/>
        <DataGrid x:Name="grdPatients" ItemsSource="{Binding Patients}" AutoGenerateColumns="True"/>
    </StackPanel>
</UserControl>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PatientApp
{
    public partial class PatientDashboardControl : UserControl
    {
        private PatientViewModel _viewModel;

        public PatientDashboardControl(PatientViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel;
            DataContext = _viewModel;
            _viewModel.PatientRegistered += OnPatientRegistered;
            grdPatients.ItemsSource = _viewModel.ConfirmedPatients;
        }

        private void OnPatientRegistered(object sender, string message)
        {
            Dispatcher.Invoke(() =>
            {
                RegistrationStatusTextBox.Text = message;
            });
           
        }

       
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientApp
{
    public class Patient
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public DateTime DateOfBirth { get; set; }
        public string Address { get; set; }
        public string Slot { get; set; } 
        public DateTime BookingDate { get; set; }

    }
}

<Window x:Class="PatientApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PatientApp"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200" />
            <ColumnDefinition Width="*" />

        </Grid.ColumnDefinitions>

        <DockPanel Grid.Column="0" Margin="20,20,589,20" Grid.ColumnSpan="2" HorizontalAlignment="Left">
            <StackPanel>
                <Button Content="Patient Registration"  Width="160" Height="40" Margin="0,10"  x:Name="btnRegistration" Click="btnRegistration_Click" />
                <Button Content="Appointment Confirmation"  Width="160" Height="40" Margin="0,10" x:Name="btnAppointment" Click="btnAppointment_Click" />
                <Button Content="Patient Dashboard" x:Name="btnDashboard" Width="160" Height="40" Margin="0,10" Click="btnDashboard_Click" />
                <Button Content="Exit" x:Name="Exit" Width="160" Height="40" Margin="0,10" Click="Exit_Click" />
            </StackPanel>
        </DockPanel>

        <ContentControl x:Name="MainContent" Grid.Column="1" Margin="20" />
    </Grid>

   
</Window>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PatientApp
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private PatientViewModel _viewModel;

        public MainWindow()
        {
            InitializeComponent();
            _viewModel = new PatientViewModel();
            _viewModel.OnPatientRegistered += OnPatientRegistered;
        }

        private void OnPatientRegistered(object sender, Patient patient)
        {
            MessageBox.Show($"Patient {patient.Name} registered!", "Registration Success", MessageBoxButton.OK, MessageBoxImage.Information);
        }

        private void btnRegistration_Click(object sender, RoutedEventArgs e)
        {
            var patientRegControl = new PatientRegControl(_viewModel);
            patientRegControl.RegistrationCompleted += (s,args) => MainContent.Content = null;
            patientRegControl.NavigateToAppointment += (s,args) =>
            {
                var appointmentControl = new AppointmentConfirmationControl(_viewModel);
                appointmentControl.AppointmentCompleted += (s1, args1) => MainContent.Content = null;
                MainContent.Content = appointmentControl;
            };
            MainContent.Content = patientRegControl;
        }

        private void btnAppointment_Click(object sender, RoutedEventArgs e)
        {
            var appointmentConfirmationControl = new AppointmentConfirmationControl(_viewModel);
            appointmentConfirmationControl.AppointmentCompleted += (s,args) => MainContent.Content = null;
            MainContent.Content = appointmentConfirmationControl;
        }

        private void btnDashboard_Click(object sender, RoutedEventArgs e)
        {
            var patientDashboardControl = new PatientDashboardControl(_viewModel);
            MainContent.Content = patientDashboardControl;
        }

        private void Exit_Click(object sender, RoutedEventArgs e)
        {
            Application.Current.Shutdown();
        }
    }
}


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PatientApp
{
    public interface IPatient
    {
        ObservableCollection<Patient> Patients { get; }
        void RegisterPatient(Patient patient);
    }
}


<UserControl x:Class="PatientApp.AppointmentConfirmationControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:PatientApp"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel >
        <TextBlock Text="Appointment Confirmation" FontSize="24" FontWeight="Bold" Margin="0,0,0,20"/>
        <TextBox x:Name="RegistrationTextBox" IsReadOnly="True"  />

        <ListBox x:Name="PatientsListBox" Height="150" >
            <!-- Items will be added dynamically in the code-behind -->
        </ListBox>

        <Button x:Name="btnConfirm" Content="Confirm Appointment"  Margin="0,20,0,0" Click="btnConfirm_Click"/>
    </StackPanel>
</UserControl>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace PatientApp
{
    public partial class AppointmentConfirmationControl : UserControl
    {
        private PatientViewModel _viewModel;
        public event EventHandler NavigateToDashboard;
        public event EventHandler AppointmentCompleted;

        public AppointmentConfirmationControl(PatientViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel;
            _viewModel.PatientRegistered += OnPatientRegistered;
            LoadPatients();
           
        }

        private void OnPatientRegistered(object sender, string message)
        {
            Dispatcher.Invoke(() =>
            {
                RegistrationTextBox.Text = message;
            });
            
        }

        private void LoadPatients()
        {
            foreach (var patient in _viewModel.Patients)
            {
                var checkBox = new CheckBox
                {
                    Content = $"{patient.Name} (Age: {patient.Age}, DOB: {patient.DateOfBirth.ToShortDateString()}, Address: {patient.Address})",
                    Tag = patient
                };
                PatientsListBox.Items.Add(checkBox);
            }
        }

        private void btnConfirm_Click(object sender, RoutedEventArgs e)
        {
            var selectedPatients = new List<Patient>();
            for (int i = PatientsListBox.Items.Count - 1; i >= 0; i--)
            {
                CheckBox checkBox = PatientsListBox.Items[i] as CheckBox;
                if (checkBox != null && checkBox.IsChecked == true && checkBox.Tag is Patient patient)
                {
                    selectedPatients.Add(patient);
                    PatientsListBox.Items.RemoveAt(i);
                }
            }

            foreach (var confirmedPatient in selectedPatients)
            {
                _viewModel.Patients.Remove(confirmedPatient);
            }

            _viewModel.ConfirmPatients(selectedPatients);
            MessageBox.Show("Appointment confirmed successfully.");
            AppointmentCompleted?.Invoke(this,EventArgs.Empty);
            NavigateToDashboard?.Invoke(this,EventArgs.Empty);
        }
    }
}


<Application x:Class="PatientApp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:PatientApp"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
         
    </Application.Resources>
</Application>


</UserControl>